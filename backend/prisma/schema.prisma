// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      String   @default("USER") // USER or ADMIN
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  addresses     Address[]
  orders        Order[]
  reviews       Review[]
  wishlistItems WishlistItem[]

  @@map("users")
}

model Address {
  id          String  @id @default(cuid())
  userId      String
  type        String  // 'billing' or 'shipping'
  firstName   String
  lastName    String
  company     String?
  address1    String
  address2    String?
  city        String
  state       String
  zipCode     String
  country     String
  phone       String?
  isDefault   Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingOrders  Order[] @relation("ShippingAddress")
  billingOrders   Order[] @relation("BillingAddress")

  @@map("addresses")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  image       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String
  price       Float
  comparePrice Float?
  sku         String?  @unique
  categoryId  String
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  weight      Float?
  dimensions  String?  // JSON string for length, width, height
  tags        String   // Comma-separated tags
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category    Category      @relation(fields: [categoryId], references: [id])
  variants    ProductVariant[]
  images      ProductImage[]
  reviews     Review[]
  orderItems  OrderItem[]
  wishlistItems WishlistItem[]

  @@map("products")
}

model ProductVariant {
  id        String  @id @default(cuid())
  productId String
  name      String  // e.g., "Size M - Color Red"
  sku       String? @unique
  price     Float
  stock     Int     @default(0)
  attributes String   // JSON string for { size: "M", color: "Red", material: "Cotton" }
  isActive  Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product   Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@unique([productId, name])
  @@map("product_variants")
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  url       String
  alt       String?
  order     Int     @default(0)
  isPrimary Boolean @default(false)
  createdAt DateTime @default(now())

  // Relations
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, url])
  @@map("product_images")
}

model Review {
  id        String   @id @default(cuid())
  productId String
  userId    String
  rating    Int      // 1-5 stars
  title     String?
  comment   String?
  isVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([productId, userId])
  @@map("reviews")
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist_items")
}

model Order {
  id                String   @id @default(cuid())
  orderNumber       String   @unique
  userId            String
  status            String   @default("PENDING") // PENDING, CONFIRMED, PROCESSING, SHIPPED, DELIVERED, CANCELLED, REFUNDED
  paymentStatus     String   @default("PENDING") // PENDING, PAID, FAILED, REFUNDED
  paymentMethod     String?
  subtotal          Float
  tax               Float    @default(0)
  shipping          Float    @default(0)
  total             Float
  notes             String?
  shippingAddressId String?
  billingAddressId  String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user            User        @relation(fields: [userId], references: [id])
  items           OrderItem[]
  shippingAddress Address?    @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress  Address?    @relation("BillingAddress", fields: [billingAddressId], references: [id])

  @@map("orders")
}

model OrderItem {
  id               String  @id @default(cuid())
  orderId          String
  productId        String
  productVariantId String?
  quantity         Int
  price            Float
  createdAt        DateTime @default(now())

  // Relations
  order         Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product       Product        @relation(fields: [productId], references: [id])
  productVariant ProductVariant? @relation(fields: [productVariantId], references: [id])

  @@map("order_items")
}
